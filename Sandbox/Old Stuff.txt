/*	Old sandbox stuff.

class Wanker {
private:
int m_int;
double m_double;
string m_string;

public:
Wanker() {}
Wanker(int x = 0 , double y = 0.0, string z = ""):
m_int( x ), m_double( y ), m_string( z ) {}

void showVars() const {
cout << "m_int is set to: " << m_int << '\n';
cout << "m_double is set to: " << m_double << '\n';
cout << "m_string is set to: " << m_string << '\n';
}
};

class MinMax {
private:
int m_min;
int m_max;
public:
MinMax(int min, int max) {
m_min = min;
m_max = max;
}

int getMin() { return m_min; }
int getMax() { return m_max; }

friend MinMax operator+(const MinMax &m1, const MinMax &m2);
friend MinMax operator+(const MinMax &m, int value);
friend MinMax operator+(int value, const MinMax m);

};

MinMax operator+(const MinMax &m1, const MinMax &m2) {
int min = m1.m_min < m2.m_min ? m1.m_min : m2.m_min;

int max = m1.m_max > m2.m_max ? m1.m_max : m2.m_max;

return MinMax(min, max);
}

MinMax operator+(const MinMax &m, int value) {
int min = m.m_min < value ? m.m_min : value;

int max = m.m_max > value ? m.m_max : value;

return MinMax(min, max);
}
MinMax operator+(int value, const MinMax m) {
return (m + value);
}

void referenceMe(int &ref) {
	ref++;
}

void showArray(array<int, 10> thisArray) {
	for (const auto &element : thisArray)
		cout << element << " ";

	cout << '\n';
}

void showVector(vector<int> myVector) {
	for (int count = 0; count < myVector.size(); ++count)
		cout << myVector[count] << '\n';
}

potatoVector[pVectorIndex].name = name;
potatoVector[pVectorIndex].circ = circ;
potatoVector[pVectorIndex].weight = weight;
potatoVector[pVectorIndex].fleshColour = flesh;
potatoVector[pVectorIndex].peelColour = peel;
potatoVector[pVectorIndex].texture = texture;

void structRef(potato &ref) {
ref.fleshColour = "green";
}

void showVector(vector<potato> myVector) {
	for (const auto &element : myVector) {
		cout << "The potato is named " << element.name << '\n';
		cout << element.name << " is " << element.circ << " around\n";
		cout << element.name << " weighs " << element.weight << '\n';
		cout << element.name << "'s insides are " << element.fleshColour << '\n';
		cout << element.name << "'s peel is " << element.peelColour << '\n';
		cout << element.name << " feels like " << element.texture << " on the inside \n";
		cout << '\n';
	}
}
// Resize potatoVector
potatoVector.resize(potatoVector.size() + 1);

// Get new size and create an index for use
int pVectorIndex = potatoVector.size() - 1;

// Create a reference to the new index
potato &ref = potatoVector[pVectorIndex];

// Create the new entry
ref.name = name;
ref.circ = circ;
ref.weight = weight;
ref.fleshColour = flesh;
ref.peelColour = peel;
ref.texture = texture;

class IntList
{
private:
	int m_list[10];

public:
	int& operator[] (const int index);
};

int& IntList::operator[] (const int index)
{
	assert(index >= 0 && index < 10);

	return m_list[index];
}

using namespace std;

class Digit
{
private:
	int m_digit;
public:
	Digit(int digit = 0)
		: m_digit(digit)
	{
	}

	Digit& operator++(); // prefix
	Digit& operator--(); // prefix

	Digit operator++(int); // postfix
	Digit operator--(int); // postfix

	friend std::ostream& operator<< (std::ostream &out, const Digit &d);
};

Digit& Digit::operator++()
{
	// If our number is already at 9, wrap around to 0
	if (m_digit == 9)
		m_digit = 0;
	// otherwise just increment to next number
	else
		++m_digit;

	return *this;
}

Digit& Digit::operator--()
{
	// If our number is already at 0, wrap around to 9
	if (m_digit == 0)
		m_digit = 9;
	// otherwise just decrement to next number
	else
		--m_digit;

	return *this;
}

Digit Digit::operator++(int)
{
	// Create a temporary variable with our current digit
	Digit temp(m_digit);

	// Use prefix operator to increment this digit
	++(*this); // apply operator

			   // return temporary result
	return temp; // return saved state
}

Digit Digit::operator--(int)
{
	// Create a temporary variable with our current digit
	Digit temp(m_digit);

	// Use prefix operator to decrement this digit
	--(*this); // apply operator

			   // return temporary result
	return temp; // return saved state
}

std::ostream& operator<< (std::ostream &out, const Digit &d)
{
	out << d.m_digit;
	return out;
}


*/